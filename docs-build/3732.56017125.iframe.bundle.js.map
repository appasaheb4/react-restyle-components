{"version":3,"file":"3732.56017125.iframe.bundle.js","mappings":";;;;;AAaA;;;;;AAOA;;;;;;;AAWA;;;;;AAQA;AAGA;;;;AAMA;;;;;;;;;;;;;;;;AAgBA;;;;AAIA;;;AAKA;;;;;;;;AAgBA;;;;;;;AA8BA;;;;AAQA;AACA;AAOA;;AAEA;;AAGA;;AAEA;AAIA;;;;AAMA;;;;;;AASA;;AAIA;;;;AAMA;;;;;;;;;;;AC3JA;;;;;;;;;;;AAWA;;;;AAMA;AACA;;;AAGA;;;;;;;;;;;;AAgBA;;;;;;;;;AASA;;;;AAIA;;;;AAMA;;;;;AAQA;AACA;;;;;AAKA;;AAIA;;;;;;;;;;;;;AAcA;;AAIA;;;;;;;;AA2BA;;;;AAMA;;;AAIA;AACA;;AAEA;AACA;;;;;AAKA;AACA;;AAEA;AACA;;;;;;;;;;;;AC7HA;;AAKA;AAeA;;;;;;AASA;;AAIA;AAMA","sources":["webpack://react-restyle-components/./src/core-components/src/components/Accordion/AccordionSection/elements.tsx","webpack://react-restyle-components/./src/core-components/src/core-components/ToggleCore/elements.tsx","webpack://react-restyle-components/./src/core-components/src/core-components/SelectionCardStrip/selectionCardStrip.tsx"],"sourcesContent":["import {styled, css} from 'styled-components';\nimport {Icon} from '../../Icon';\nimport {StateLayer} from '../../../core-components';\n// import {Divider} from '../Divider';\nimport {AccordionVariant, LeadingTrailingAlignment} from './types';\n\nconst Divider = styled.hr`\n  border: none;\n  border-top: 1px solid;\n  margin: 0;\n  width: 100%;\n`;\n\nexport const AccordionElement = styled.div<{\n  $variant: AccordionVariant | 'inline' | 'full-page';\n}>`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  flex-direction: column;\n  ${({$variant}) =>\n    $variant === 'inline' &&\n    css`\n      border: 1px solid var(--outline);\n      border-radius: var(--border-radius-100);\n    `};\n  overflow: hidden;\n  width: 100%;\n  color: var(--on-surface);\n`;\n\nexport const AccordionSectionWrapper = styled.div<{\n  $variant: AccordionVariant | 'inline' | 'full-page';\n  $isOpen: boolean;\n}>`\n  overflow: hidden;\n  width: 100%;\n  isolation: isolate;\n\n  ${({$variant}) =>\n    $variant === 'inline' &&\n    css`\n      &:last-child ${AccordionDivider} {\n        display: none;\n      }\n    `};\n`;\n\nexport const ButtonElement = styled.button`\n  all: unset;\n\n  z-index: 1;\n  position: relative;\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n\n  background-color: var(--surface);\n\n  display: flex;\n  gap: var(--spacing-100);\n  align-items: center;\n  padding: var(--spacing-200);\n\n  &:hover:not(:disabled) ${StateLayer} {\n    opacity: var(--state-layer-hover);\n  }\n\n  &:active:not(:disabled) ${StateLayer} {\n    opacity: var(--state-layer-press);\n  }\n`;\n\nexport const AccordionSectionText = styled.div`\n  line-height: 1.3;\n  flex-grow: 1;\n  padding-right: var(--spacing-100);\n\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-050);\n`;\n\ntype AccordionSectionContentProps = {\n  $isOpen: boolean;\n  $hasLeader: boolean;\n  $transitionDuration: string;\n};\n\nexport const AccordionFade = styled.div<{\n  $isOpen: boolean;\n  $transitionDuration: string;\n  $transitionTimingFunction: string;\n}>`\n  z-index: 0;\n  position: relative;\n  background: linear-gradient(to bottom, transparent, var(--surface));\n  width: 100%;\n  height: var(--spacing-150);\n  margin-top: calc(var(--spacing-150) * -1);\n`;\n\nconst getTransitionTimingFunction = (\n  transitionTimingFunction: string,\n  isOpen: boolean\n) => {\n  if (\n    transitionTimingFunction !== 'ease-in' &&\n    transitionTimingFunction !== 'ease-out'\n  ) {\n    return transitionTimingFunction;\n  }\n\n  if (isOpen) {\n    return 'ease-out';\n  }\n  return 'ease-in';\n};\n\nexport const AccordionSectionContentWrapper = styled.div<{\n  $isOpen: boolean;\n  $transitionDuration: string;\n  $transitionTimingFunction: string;\n}>`\n  z-index: -1;\n  position: relative;\n  display: grid;\n  grid-template-rows: ${({$isOpen}) => ($isOpen ? '1fr' : '0fr')};\n  transition: ${({$transitionDuration, $transitionTimingFunction, $isOpen}) =>\n    `grid-template-rows ${$transitionDuration} ${getTransitionTimingFunction(\n      $transitionTimingFunction,\n      $isOpen\n    )}`};\n`;\n\nexport const AccordionSectionContent = styled.div<AccordionSectionContentProps>`\n  overflow-y: hidden;\n  transition: ${({$transitionDuration}) =>\n    `opacity ${$transitionDuration} linear`};\n  line-height: 1.3;\n  opacity: ${({$isOpen}) => ($isOpen ? 1 : 0)};\n  padding-right: var(--spacing-150);\n  padding-left: ${({$hasLeader}) =>\n    $hasLeader ? 'var(--spacing-600)' : 'var(--spacing-200)'};\n`;\n\nexport const StyledLeadingTrailing = styled.div<{\n  alignment?: LeadingTrailingAlignment;\n}>`\n  flex-shrink: 0;\n  min-width: var(--spacing-300);\n  display: flex;\n  align-self: ${({alignment}) =>\n    alignment === 'center' ? 'center' : 'flex-start'};\n\n  img,\n  picture {\n    object-fit: contain;\n  }\n`;\n\nexport const AccordionDivider = styled(Divider)`\n  border-color: var(--outline);\n`;\n\nexport const RotatingIcon = styled(Icon.SSR)<{\n  $rotateIcon: boolean;\n}>`\n  overflow: hidden;\n  flex-shrink: 0;\n  transition: transform 0.4s ease-in-out;\n  transform: ${({$rotateIcon}) => `rotate(${$rotateIcon ? -180 : 0}deg)`};\n`;\n","import React from 'react';\nimport {styled, css} from 'styled-components';\nimport {createTransition} from '../../utils';\nimport {StateLayer} from '../StateLayer';\n// import {Text} from '../../components/Text';\n\nconst Text = (props: any) => {\n  return <span {...props} />;\n};\n\ntype ToggleProps = {\n  $checked: boolean;\n  $showInteraction: boolean;\n  $indeterminate?: boolean;\n};\n\nconst baseToggleStyles = css<ToggleProps>`\n  position: relative;\n  display: block;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  width: 1.25rem;\n  height: 1.25rem;\n  flex-shrink: 0;\n  margin-right: var(--aui-spacing-100);\n\n  ${({$showInteraction}) =>\n    $showInteraction &&\n    css`\n      // Transitions\n      &:before,\n      [data-aui='icon'],\n      ${StateLayer} {\n        ${createTransition({properties: ['opacity']})}\n      }\n\n      ${createTransition({\n        properties: ['box-shadow', 'background-color', 'color'],\n      })}\n\n      // Support keyboard focus\n      &:has(~ input:focus-visible) {\n        outline: 1px solid blue;\n      }\n\n      // Disabled styles\n      &:has(~ input:disabled) {\n        opacity: var(--aui-state-layer-on-disabled);\n      }\n    `}\n`;\n\nconst StyledCheckbox = styled.span<ToggleProps>`\n  [data-aui='icon-check'],\n  [data-aui='icon-minus'] {\n    position: absolute;\n    inset: 0;\n    margin: auto;\n    transition: opacity 0.15s;\n    pointer-events: none;\n  }\n  ${baseToggleStyles};\n\n  border-radius: var(--aui-border-radius-050);\n\n  ${({$checked, $indeterminate}) =>\n    $checked || $indeterminate\n      ? css`\n          box-shadow: 0 0 0 1px var(--aui-inverse-surface) inset;\n          background: var(--aui-inverse-surface);\n          color: var(--aui-inverse-on-surface);\n        `\n      : css`\n          box-shadow: 0 0 0 1px var(--aui-outline) inset;\n          background: var(--aui-surface);\n          color: var(--aui-on-surface);\n        `}\n`;\n\nconst StyledRadio = styled.span<ToggleProps>`\n  ${baseToggleStyles};\n\n  border-radius: var(--aui-border-radius-round);\n  background: var(--aui-surface);\n\n  ${({$checked}) =>\n    $checked\n      ? css`\n          box-shadow: 0 0 0 2px var(--aui-inverse-surface) inset;\n        `\n      : css`\n          box-shadow: 0 0 0 1px var(--aui-outline) inset;\n        `}\n\n  &:before {\n    content: '';\n    position: absolute;\n    border-radius: var(--aui-border-radius-round);\n    width: 0.625rem;\n    height: 0.625rem;\n    top: 0.3125rem;\n    left: 0.3125rem;\n    background: var(--aui-inverse-surface);\n    opacity: ${({$checked}) => ($checked ? '1' : '0')};\n  }\n`;\n\nexport const CheckboxToggle = ({...props}: ToggleProps) => (\n  <StyledCheckbox {...props}>\n    <StateLayer />\n    {/* <Icon nameIcon=\"IoIosCheckmarkCircleOutline\" />\n    <Icon nameIcon=\"FaMinusCircle\" /> */}\n    <span>Icons</span>\n  </StyledCheckbox>\n);\n\nexport const RadioToggle = (props: ToggleProps) => (\n  <StyledRadio {...props}>\n    <StateLayer />\n  </StyledRadio>\n);\n\nexport const StyledDescription = styled(Text).attrs({\n  size: 2,\n})`\n  color: var(--aui-on-surface);\n  line-height: 1.3;\n\n  &:has(~ input:disabled) {\n    opacity: var(--aui-state-layer-on-disabled);\n    cursor: not-allowed;\n  }\n`;\n\nexport const HiddenInput = styled.input`\n  position: fixed;\n  opacity: 0;\n  pointer-events: none;\n`;\n\n/** Add this style snippet to the label containing this ToggleCore component */\nexport const toggleParentStyles = css`\n  &:not(:has(input:disabled)) {\n    &:hover\n      ${StyledCheckbox}\n      ${StateLayer},\n      &:hover\n      ${StyledRadio}\n      ${StateLayer} {\n      opacity: var(--aui-state-layer-hover);\n    }\n\n    &:active\n      ${StyledCheckbox}\n      ${StateLayer},\n      &:hover\n      ${StyledRadio}\n      ${StateLayer} {\n      opacity: var(--aui-state-layer-press);\n    }\n  }\n`;\n","'use client';\n\nimport React, {HTMLAttributes} from 'react';\nimport {styled} from 'styled-components';\n// import {Card, CardProps} from '../../components/Card';\nimport {createTransition, dontForwardProps} from '../../utils';\nimport {colors} from '../../utils';\nimport {toggleParentStyles} from '../ToggleCore';\n\nconst Card = (props: any) => {\n  return <div {...props} />;\n};\n\nexport type CardProps = {\n  selected?: boolean;\n  type?: 'selection' | 'default';\n  element?: string;\n};\n\ntype WrapperProps = HTMLAttributes<HTMLElement> &\n  CardProps & {\n    checked?: boolean;\n    focused?: boolean;\n  };\n\nconst StyledCard = styled(Card).withConfig(dontForwardProps())<WrapperProps>`\n  display: inline-flex;\n  align-items: flex-start;\n  box-sizing: border-box;\n  text-align: left;\n  line-height: 1.3;\n  -moz-osx-font-smoothing: grayscale;\n\n  ${() =>\n    createTransition({\n      properties: ['box-shadow', 'background-color'],\n    })}\n\n  ${toggleParentStyles};\n`;\n\nconst Wrapper = React.forwardRef<HTMLDivElement, WrapperProps>(\n  (props, fRef) => (\n    <StyledCard\n      ref={fRef}\n      element=\"label\"\n      type=\"selection\"\n      selected={props.checked || props.focused}\n      {...props}\n    />\n  )\n);\n\nconst InternalWrapper = styled.div.withConfig(dontForwardProps())<{\n  isDisabled: boolean;\n  disableSvgColorOverride?: boolean;\n}>`\n  display: flex;\n  z-index: 1;\n  width: 100%;\n  justify-content: center;\n  padding: 0.1rem 0 0 0;\n  ${createTransition({\n    properties: ['color'],\n  })};\n\n  ${({isDisabled}) =>\n    isDisabled &&\n    `\n      cursor: not-allowed;\n      color: ${colors.disabledText};\n`}\n  ${({disableSvgColorOverride, isDisabled}) =>\n    !disableSvgColorOverride &&\n    `\n    svg path {\n      fill: none;\n      stroke: ${isDisabled && colors.disabledText};\n    }\n`}\n`;\n\nexport const SelectionCardStrip = {\n  Wrapper,\n  InternalWrapper,\n};\n"],"names":[],"sourceRoot":""}