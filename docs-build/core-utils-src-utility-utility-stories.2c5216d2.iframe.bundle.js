"use strict";(self.webpackChunkreact_restyle_components=self.webpackChunkreact_restyle_components||[]).push([[9735],{"./src/core-utils/src/utility/utility.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllUtilities:()=>AllUtilities,DateCalculations:()=>DateCalculations,Debounce:()=>Debounce,__namedExportsOrder:()=>__namedExportsOrder,default:()=>utility_stories});var react=__webpack_require__("./node_modules/react/index.js");const debounce=__webpack_require__("./node_modules/lodash/lodash.js").debounce((fun=>{fun()}),1e3),calculateHoursDifference=(date1,date2)=>{const diffInMs=Math.abs(date2.getTime()-date1.getTime());return Math.floor(diffInMs/36e5)},calculateHoursDifferenceDecimal=(date1,date2)=>Math.abs(date2.getTime()-date1.getTime())/36e5,utility_stories={title:"Core Utils/Utility",parameters:{docs:{description:{component:"\nA collection of utility functions for common operations including debouncing and date calculations.\n\n**Available Functions:**\n- `debounce` - Debounces function execution with 1000ms delay\n- `calculateHoursDifference` - Calculate hours between dates (integer)\n- `calculateHoursDifferenceDecimal` - Calculate hours between dates (decimal)\n\n**Example usage:**\n\n```ts\nimport { debounce, calculateHoursDifference } from 'react-restyle-components';\n\n// Debounce example\ndebounce(() => console.log('Executed after 1s delay'));\n\n// Date calculation\nconst hours = calculateHoursDifference(new Date(), new Date(Date.now() + 3600000));\n```\n        "}}}},Debounce={args:{searchTerm:""},render:({searchTerm})=>{const[inputValue,setInputValue]=(0,react.useState)(searchTerm),[debouncedValue,setDebouncedValue]=(0,react.useState)(""),[executionCount,setExecutionCount]=(0,react.useState)(0),[lastExecuted,setLastExecuted]=(0,react.useState)("");return react.createElement("div",{style:{display:"flex",flexDirection:"column",gap:20,maxWidth:600}},react.createElement("div",{style:{fontFamily:"monospace",background:"#f6f8fa",padding:16,borderRadius:8}},react.createElement("h3",{style:{margin:"0 0 16px 0"}},"Debounce Function Test"),react.createElement("div",{style:{marginBottom:16}},react.createElement("label",{style:{display:"block",marginBottom:8,fontWeight:"bold"}},"Type to test debouncing (1000ms delay):"),react.createElement("input",{type:"text",value:inputValue,onChange:e=>{const value=e.target.value;setInputValue(value),debounce((()=>{setDebouncedValue(value),setExecutionCount((prev=>prev+1)),setLastExecuted((new Date).toLocaleTimeString())}))},placeholder:"Start typing...",style:{width:"100%",padding:"8px 12px",borderRadius:4,border:"1px solid #ccc",fontSize:14}})),react.createElement("div",{style:{display:"grid",gridTemplateColumns:"1fr 1fr",gap:16}},react.createElement("div",null,react.createElement("div",null,react.createElement("strong",null,"Current Input:")),react.createElement("code",{style:{background:"#fff",padding:4,borderRadius:2}},'"',inputValue,'"')),react.createElement("div",null,react.createElement("div",null,react.createElement("strong",null,"Debounced Value:")),react.createElement("code",{style:{background:"#fff",padding:4,borderRadius:2}},'"',debouncedValue,'"'))),react.createElement("div",{style:{marginTop:16,display:"grid",gridTemplateColumns:"1fr 1fr",gap:16}},react.createElement("div",null,react.createElement("div",null,react.createElement("strong",null,"Execution Count:")),react.createElement("code",{style:{background:"#fff",padding:4,borderRadius:2}},executionCount)),react.createElement("div",null,react.createElement("div",null,react.createElement("strong",null,"Last Executed:")),react.createElement("code",{style:{background:"#fff",padding:4,borderRadius:2}},lastExecuted||"Never")))),react.createElement("div",{style:{fontFamily:"monospace",background:"#f6f8fa",padding:16,borderRadius:8}},react.createElement("div",null,react.createElement("strong",null,"Code Example:"),react.createElement("pre",{style:{background:"#fff",padding:12,borderRadius:4,overflow:"auto"}},"import { debounce } from 'react-restyle-components';\n\nconst handleSearch = (searchTerm) => {\n  debounce(() => {\n    // This will execute 1000ms after the last call\n    console.log('Searching for:', searchTerm);\n  });\n};"))))}},DateCalculations={args:{date1:(new Date).toISOString().slice(0,16),date2:new Date(Date.now()+18e6).toISOString().slice(0,16)},render:({date1,date2})=>{const[firstDate,setFirstDate]=(0,react.useState)(date1),[secondDate,setSecondDate]=(0,react.useState)(date2),dateObj1=new Date(firstDate),dateObj2=new Date(secondDate),hoursInteger=calculateHoursDifference(dateObj1,dateObj2),hoursDecimal=calculateHoursDifferenceDecimal(dateObj1,dateObj2);return react.createElement("div",{style:{display:"flex",flexDirection:"column",gap:20,maxWidth:600}},react.createElement("div",{style:{fontFamily:"monospace",background:"#f6f8fa",padding:16,borderRadius:8}},react.createElement("h3",{style:{margin:"0 0 16px 0"}},"Date Calculations"),react.createElement("div",{style:{display:"grid",gridTemplateColumns:"1fr 1fr",gap:16,marginBottom:16}},react.createElement("div",null,react.createElement("label",{style:{display:"block",marginBottom:8,fontWeight:"bold"}},"First Date:"),react.createElement("input",{type:"datetime-local",value:firstDate,onChange:e=>setFirstDate(e.target.value),style:{width:"100%",padding:"8px 12px",borderRadius:4,border:"1px solid #ccc",fontSize:14}})),react.createElement("div",null,react.createElement("label",{style:{display:"block",marginBottom:8,fontWeight:"bold"}},"Second Date:"),react.createElement("input",{type:"datetime-local",value:secondDate,onChange:e=>setSecondDate(e.target.value),style:{width:"100%",padding:"8px 12px",borderRadius:4,border:"1px solid #ccc",fontSize:14}}))),react.createElement("div",{style:{marginBottom:16}},react.createElement("div",{style:{marginBottom:8,fontWeight:"bold"}},"Quick Presets:"),react.createElement("div",{style:{display:"flex",gap:8,flexWrap:"wrap"}},[1,3,6,12,24,48].map((hours=>react.createElement("button",{key:hours,onClick:()=>(hours=>{const now=new Date,later=new Date(now.getTime()+60*hours*60*1e3);setFirstDate(now.toISOString().slice(0,16)),setSecondDate(later.toISOString().slice(0,16))})(hours),style:{padding:"4px 8px",borderRadius:4,border:"1px solid #ccc",background:"#fff",cursor:"pointer",fontSize:12}},"+",hours,"h"))))),react.createElement("div",{style:{display:"grid",gridTemplateColumns:"1fr 1fr",gap:16}},react.createElement("div",{style:{background:"#fff",padding:12,borderRadius:4,border:"1px solid #ddd"}},react.createElement("div",{style:{fontWeight:"bold",marginBottom:8}},"Integer Hours"),react.createElement("div",null,react.createElement("code",null,"calculateHoursDifference()")),react.createElement("div",{style:{fontSize:24,fontWeight:"bold",color:"#0066cc",marginTop:8}},hoursInteger," hours")),react.createElement("div",{style:{background:"#fff",padding:12,borderRadius:4,border:"1px solid #ddd"}},react.createElement("div",{style:{fontWeight:"bold",marginBottom:8}},"Decimal Hours"),react.createElement("div",null,react.createElement("code",null,"calculateHoursDifferenceDecimal()")),react.createElement("div",{style:{fontSize:24,fontWeight:"bold",color:"#0066cc",marginTop:8}},hoursDecimal.toFixed(2)," hours"))),react.createElement("div",{style:{marginTop:16,fontSize:12,color:"#666"}},react.createElement("div",null,react.createElement("strong",null,"Date 1:")," ",dateObj1.toLocaleString()),react.createElement("div",null,react.createElement("strong",null,"Date 2:")," ",dateObj2.toLocaleString()),react.createElement("div",null,react.createElement("strong",null,"Direction:")," ",dateObj2>dateObj1?"Future":"Past"))),react.createElement("div",{style:{fontFamily:"monospace",background:"#f6f8fa",padding:16,borderRadius:8}},react.createElement("div",null,react.createElement("strong",null,"Code Examples:"),react.createElement("pre",{style:{background:"#fff",padding:12,borderRadius:4,overflow:"auto"}},`import { \n  calculateHoursDifference, \n  calculateHoursDifferenceDecimal \n} from 'react-restyle-components';\n\nconst date1 = new Date('${dateObj1.toISOString()}');\nconst date2 = new Date('${dateObj2.toISOString()}');\n\n// Integer hours (floor)\nconst integerHours = calculateHoursDifference(date1, date2);\n// Result: ${hoursInteger}\n\n// Decimal hours (precise)\nconst decimalHours = calculateHoursDifferenceDecimal(date1, date2);\n// Result: ${hoursDecimal.toFixed(4)}`))))}},AllUtilities={render:()=>{const[searchInput,setSearchInput]=(0,react.useState)(""),[debouncedResult,setDebouncedResult]=(0,react.useState)(""),[date1,setDate1]=(0,react.useState)((new Date).toISOString().slice(0,16)),[date2,setDate2]=(0,react.useState)(new Date(Date.now()+72e5).toISOString().slice(0,16)),dateObj1=new Date(date1),dateObj2=new Date(date2),hoursInt=calculateHoursDifference(dateObj1,dateObj2),hoursDec=calculateHoursDifferenceDecimal(dateObj1,dateObj2);return react.createElement("div",{style:{display:"flex",flexDirection:"column",gap:24,maxWidth:800}},react.createElement("div",{style:{background:"#f6f8fa",padding:20,borderRadius:8,border:"1px solid #ddd"}},react.createElement("h2",{style:{margin:"0 0 20px 0"}},"All Utility Functions Demo"),react.createElement("div",{style:{marginBottom:20}},react.createElement("h4",{style:{margin:"0 0 12px 0"}},"ðŸš€ Debounce Function"),react.createElement("input",{type:"text",value:searchInput,onChange:e=>{return value=e.target.value,setSearchInput(value),void debounce((()=>{setDebouncedResult(`Searched: "${value}" at ${(new Date).toLocaleTimeString()}`)}));var value},placeholder:"Type to test debouncing...",style:{width:"100%",padding:"8px 12px",borderRadius:4,border:"1px solid #ccc",marginBottom:8}}),react.createElement("div",{style:{fontSize:12,color:"#666"}},react.createElement("strong",null,"Debounced Result:")," ",debouncedResult||"Start typing...")),react.createElement("div",null,react.createElement("h4",{style:{margin:"0 0 12px 0"}},"ðŸ“… Date Calculations"),react.createElement("div",{style:{display:"grid",gridTemplateColumns:"1fr 1fr",gap:12,marginBottom:12}},react.createElement("input",{type:"datetime-local",value:date1,onChange:e=>setDate1(e.target.value),style:{padding:"8px 12px",borderRadius:4,border:"1px solid #ccc"}}),react.createElement("input",{type:"datetime-local",value:date2,onChange:e=>setDate2(e.target.value),style:{padding:"8px 12px",borderRadius:4,border:"1px solid #ccc"}})),react.createElement("div",{style:{display:"flex",gap:20,fontSize:14}},react.createElement("div",null,react.createElement("strong",null,"Integer Hours:")," ",react.createElement("code",null,hoursInt)),react.createElement("div",null,react.createElement("strong",null,"Decimal Hours:")," ",react.createElement("code",null,hoursDec.toFixed(2)))))),react.createElement("div",{style:{background:"#f6f8fa",padding:16,borderRadius:8,fontFamily:"monospace"}},react.createElement("strong",null,"Import Statement:"),react.createElement("pre",{style:{background:"#fff",padding:12,borderRadius:4,marginTop:8}},"import { \n  debounce, \n  calculateHoursDifference, \n  calculateHoursDifferenceDecimal \n} from 'react-restyle-components';")))}},__namedExportsOrder=["Debounce","DateCalculations","AllUtilities"];Debounce.parameters={...Debounce.parameters,docs:{...Debounce.parameters?.docs,source:{originalSource:"{\n  args: {\n    searchTerm: ''\n  },\n  render: ({\n    searchTerm\n  }) => {\n    const [inputValue, setInputValue] = useState(searchTerm);\n    const [debouncedValue, setDebouncedValue] = useState('');\n    const [executionCount, setExecutionCount] = useState(0);\n    const [lastExecuted, setLastExecuted] = useState<string>('');\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const value = e.target.value;\n      setInputValue(value);\n\n      // Use debounce function\n      debounce(() => {\n        setDebouncedValue(value);\n        setExecutionCount(prev => prev + 1);\n        setLastExecuted(new Date().toLocaleTimeString());\n      });\n    };\n    return <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      gap: 20,\n      maxWidth: 600\n    }}>\n        <div style={{\n        fontFamily: 'monospace',\n        background: '#f6f8fa',\n        padding: 16,\n        borderRadius: 8\n      }}>\n          <h3 style={{\n          margin: '0 0 16px 0'\n        }}>Debounce Function Test</h3>\n\n          <div style={{\n          marginBottom: 16\n        }}>\n            <label style={{\n            display: 'block',\n            marginBottom: 8,\n            fontWeight: 'bold'\n          }}>\n              Type to test debouncing (1000ms delay):\n            </label>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange} placeholder=\"Start typing...\" style={{\n            width: '100%',\n            padding: '8px 12px',\n            borderRadius: 4,\n            border: '1px solid #ccc',\n            fontSize: 14\n          }} />\n          </div>\n\n          <div style={{\n          display: 'grid',\n          gridTemplateColumns: '1fr 1fr',\n          gap: 16\n        }}>\n            <div>\n              <div>\n                <strong>Current Input:</strong>\n              </div>\n              <code style={{\n              background: '#fff',\n              padding: 4,\n              borderRadius: 2\n            }}>\n                \"{inputValue}\"\n              </code>\n            </div>\n            <div>\n              <div>\n                <strong>Debounced Value:</strong>\n              </div>\n              <code style={{\n              background: '#fff',\n              padding: 4,\n              borderRadius: 2\n            }}>\n                \"{debouncedValue}\"\n              </code>\n            </div>\n          </div>\n\n          <div style={{\n          marginTop: 16,\n          display: 'grid',\n          gridTemplateColumns: '1fr 1fr',\n          gap: 16\n        }}>\n            <div>\n              <div>\n                <strong>Execution Count:</strong>\n              </div>\n              <code style={{\n              background: '#fff',\n              padding: 4,\n              borderRadius: 2\n            }}>\n                {executionCount}\n              </code>\n            </div>\n            <div>\n              <div>\n                <strong>Last Executed:</strong>\n              </div>\n              <code style={{\n              background: '#fff',\n              padding: 4,\n              borderRadius: 2\n            }}>\n                {lastExecuted || 'Never'}\n              </code>\n            </div>\n          </div>\n        </div>\n\n        <div style={{\n        fontFamily: 'monospace',\n        background: '#f6f8fa',\n        padding: 16,\n        borderRadius: 8\n      }}>\n          <div>\n            <strong>Code Example:</strong>\n            <pre style={{\n            background: '#fff',\n            padding: 12,\n            borderRadius: 4,\n            overflow: 'auto'\n          }}>\n              {`import { debounce } from 'react-restyle-components';\n\nconst handleSearch = (searchTerm) => {\n  debounce(() => {\n    // This will execute 1000ms after the last call\n    console.log('Searching for:', searchTerm);\n  });\n};`}\n            </pre>\n          </div>\n        </div>\n      </div>;\n  }\n}",...Debounce.parameters?.docs?.source}}},DateCalculations.parameters={...DateCalculations.parameters,docs:{...DateCalculations.parameters?.docs,source:{originalSource:"{\n  args: {\n    date1: new Date().toISOString().slice(0, 16),\n    date2: new Date(Date.now() + 5 * 60 * 60 * 1000).toISOString().slice(0, 16) // 5 hours later\n  },\n  render: ({\n    date1,\n    date2\n  }) => {\n    const [firstDate, setFirstDate] = useState(date1);\n    const [secondDate, setSecondDate] = useState(date2);\n    const dateObj1 = new Date(firstDate);\n    const dateObj2 = new Date(secondDate);\n    const hoursInteger = calculateHoursDifference(dateObj1, dateObj2);\n    const hoursDecimal = calculateHoursDifferenceDecimal(dateObj1, dateObj2);\n    const handlePresetDifference = (hours: number) => {\n      const now = new Date();\n      const later = new Date(now.getTime() + hours * 60 * 60 * 1000);\n      setFirstDate(now.toISOString().slice(0, 16));\n      setSecondDate(later.toISOString().slice(0, 16));\n    };\n    return <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      gap: 20,\n      maxWidth: 600\n    }}>\n        <div style={{\n        fontFamily: 'monospace',\n        background: '#f6f8fa',\n        padding: 16,\n        borderRadius: 8\n      }}>\n          <h3 style={{\n          margin: '0 0 16px 0'\n        }}>Date Calculations</h3>\n\n          <div style={{\n          display: 'grid',\n          gridTemplateColumns: '1fr 1fr',\n          gap: 16,\n          marginBottom: 16\n        }}>\n            <div>\n              <label style={{\n              display: 'block',\n              marginBottom: 8,\n              fontWeight: 'bold'\n            }}>\n                First Date:\n              </label>\n              <input type=\"datetime-local\" value={firstDate} onChange={e => setFirstDate(e.target.value)} style={{\n              width: '100%',\n              padding: '8px 12px',\n              borderRadius: 4,\n              border: '1px solid #ccc',\n              fontSize: 14\n            }} />\n            </div>\n            <div>\n              <label style={{\n              display: 'block',\n              marginBottom: 8,\n              fontWeight: 'bold'\n            }}>\n                Second Date:\n              </label>\n              <input type=\"datetime-local\" value={secondDate} onChange={e => setSecondDate(e.target.value)} style={{\n              width: '100%',\n              padding: '8px 12px',\n              borderRadius: 4,\n              border: '1px solid #ccc',\n              fontSize: 14\n            }} />\n            </div>\n          </div>\n\n          <div style={{\n          marginBottom: 16\n        }}>\n            <div style={{\n            marginBottom: 8,\n            fontWeight: 'bold'\n          }}>\n              Quick Presets:\n            </div>\n            <div style={{\n            display: 'flex',\n            gap: 8,\n            flexWrap: 'wrap'\n          }}>\n              {[1, 3, 6, 12, 24, 48].map(hours => <button key={hours} onClick={() => handlePresetDifference(hours)} style={{\n              padding: '4px 8px',\n              borderRadius: 4,\n              border: '1px solid #ccc',\n              background: '#fff',\n              cursor: 'pointer',\n              fontSize: 12\n            }}>\n                  +{hours}h\n                </button>)}\n            </div>\n          </div>\n\n          <div style={{\n          display: 'grid',\n          gridTemplateColumns: '1fr 1fr',\n          gap: 16\n        }}>\n            <div style={{\n            background: '#fff',\n            padding: 12,\n            borderRadius: 4,\n            border: '1px solid #ddd'\n          }}>\n              <div style={{\n              fontWeight: 'bold',\n              marginBottom: 8\n            }}>\n                Integer Hours\n              </div>\n              <div>\n                <code>calculateHoursDifference()</code>\n              </div>\n              <div style={{\n              fontSize: 24,\n              fontWeight: 'bold',\n              color: '#0066cc',\n              marginTop: 8\n            }}>\n                {hoursInteger} hours\n              </div>\n            </div>\n            <div style={{\n            background: '#fff',\n            padding: 12,\n            borderRadius: 4,\n            border: '1px solid #ddd'\n          }}>\n              <div style={{\n              fontWeight: 'bold',\n              marginBottom: 8\n            }}>\n                Decimal Hours\n              </div>\n              <div>\n                <code>calculateHoursDifferenceDecimal()</code>\n              </div>\n              <div style={{\n              fontSize: 24,\n              fontWeight: 'bold',\n              color: '#0066cc',\n              marginTop: 8\n            }}>\n                {hoursDecimal.toFixed(2)} hours\n              </div>\n            </div>\n          </div>\n\n          <div style={{\n          marginTop: 16,\n          fontSize: 12,\n          color: '#666'\n        }}>\n            <div>\n              <strong>Date 1:</strong> {dateObj1.toLocaleString()}\n            </div>\n            <div>\n              <strong>Date 2:</strong> {dateObj2.toLocaleString()}\n            </div>\n            <div>\n              <strong>Direction:</strong>{' '}\n              {dateObj2 > dateObj1 ? 'Future' : 'Past'}\n            </div>\n          </div>\n        </div>\n\n        <div style={{\n        fontFamily: 'monospace',\n        background: '#f6f8fa',\n        padding: 16,\n        borderRadius: 8\n      }}>\n          <div>\n            <strong>Code Examples:</strong>\n            <pre style={{\n            background: '#fff',\n            padding: 12,\n            borderRadius: 4,\n            overflow: 'auto'\n          }}>\n              {`import { \n  calculateHoursDifference, \n  calculateHoursDifferenceDecimal \n} from 'react-restyle-components';\n\nconst date1 = new Date('${dateObj1.toISOString()}');\nconst date2 = new Date('${dateObj2.toISOString()}');\n\n// Integer hours (floor)\nconst integerHours = calculateHoursDifference(date1, date2);\n// Result: ${hoursInteger}\n\n// Decimal hours (precise)\nconst decimalHours = calculateHoursDifferenceDecimal(date1, date2);\n// Result: ${hoursDecimal.toFixed(4)}`}\n            </pre>\n          </div>\n        </div>\n      </div>;\n  }\n}",...DateCalculations.parameters?.docs?.source}}},AllUtilities.parameters={...AllUtilities.parameters,docs:{...AllUtilities.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    const [searchInput, setSearchInput] = useState('');\n    const [debouncedResult, setDebouncedResult] = useState('');\n    const [date1, setDate1] = useState(new Date().toISOString().slice(0, 16));\n    const [date2, setDate2] = useState(new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString().slice(0, 16));\n    const handleSearch = (value: string) => {\n      setSearchInput(value);\n      debounce(() => {\n        setDebouncedResult(`Searched: \"${value}\" at ${new Date().toLocaleTimeString()}`);\n      });\n    };\n    const dateObj1 = new Date(date1);\n    const dateObj2 = new Date(date2);\n    const hoursInt = calculateHoursDifference(dateObj1, dateObj2);\n    const hoursDec = calculateHoursDifferenceDecimal(dateObj1, dateObj2);\n    return <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      gap: 24,\n      maxWidth: 800\n    }}>\n        <div style={{\n        background: '#f6f8fa',\n        padding: 20,\n        borderRadius: 8,\n        border: '1px solid #ddd'\n      }}>\n          <h2 style={{\n          margin: '0 0 20px 0'\n        }}>All Utility Functions Demo</h2>\n\n          {/* Debounce Section */}\n          <div style={{\n          marginBottom: 20\n        }}>\n            <h4 style={{\n            margin: '0 0 12px 0'\n          }}>ðŸš€ Debounce Function</h4>\n            <input type=\"text\" value={searchInput} onChange={e => handleSearch(e.target.value)} placeholder=\"Type to test debouncing...\" style={{\n            width: '100%',\n            padding: '8px 12px',\n            borderRadius: 4,\n            border: '1px solid #ccc',\n            marginBottom: 8\n          }} />\n            <div style={{\n            fontSize: 12,\n            color: '#666'\n          }}>\n              <strong>Debounced Result:</strong>{' '}\n              {debouncedResult || 'Start typing...'}\n            </div>\n          </div>\n\n          {/* Date Calculations Section */}\n          <div>\n            <h4 style={{\n            margin: '0 0 12px 0'\n          }}>ðŸ“… Date Calculations</h4>\n            <div style={{\n            display: 'grid',\n            gridTemplateColumns: '1fr 1fr',\n            gap: 12,\n            marginBottom: 12\n          }}>\n              <input type=\"datetime-local\" value={date1} onChange={e => setDate1(e.target.value)} style={{\n              padding: '8px 12px',\n              borderRadius: 4,\n              border: '1px solid #ccc'\n            }} />\n              <input type=\"datetime-local\" value={date2} onChange={e => setDate2(e.target.value)} style={{\n              padding: '8px 12px',\n              borderRadius: 4,\n              border: '1px solid #ccc'\n            }} />\n            </div>\n            <div style={{\n            display: 'flex',\n            gap: 20,\n            fontSize: 14\n          }}>\n              <div>\n                <strong>Integer Hours:</strong> <code>{hoursInt}</code>\n              </div>\n              <div>\n                <strong>Decimal Hours:</strong>{' '}\n                <code>{hoursDec.toFixed(2)}</code>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div style={{\n        background: '#f6f8fa',\n        padding: 16,\n        borderRadius: 8,\n        fontFamily: 'monospace'\n      }}>\n          <strong>Import Statement:</strong>\n          <pre style={{\n          background: '#fff',\n          padding: 12,\n          borderRadius: 4,\n          marginTop: 8\n        }}>\n            {`import { \n  debounce, \n  calculateHoursDifference, \n  calculateHoursDifferenceDecimal \n} from 'react-restyle-components';`}\n          </pre>\n        </div>\n      </div>;\n  }\n}",...AllUtilities.parameters?.docs?.source}}}}}]);